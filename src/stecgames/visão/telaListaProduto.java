/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package stecgames.visão;

import java.awt.Color;
import java.awt.Component;
import java.rmi.ServerException;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;
import stecgames.modelo.Produtos;
import stecgames.persistencia.ConnectionFactory;
import stecgames.persistencia.ProdutoDAO;
import stecgames.utilitarios.soNumeros;
import stecgames.utilitarios.soNumerosV;
import static stecgames.visão.TelaPrincipal.JdpPrincipal;

/**
 *
 * @author sala308b
 */
public class telaListaProduto extends javax.swing.JInternalFrame {
  
    telaRequisicao enviaTexto;
    telaPedido pegarTexto;
    
    /** Creates new form tela2 */
    public telaListaProduto() {
        initComponents();
        
        txtQtnEstoque.setDocument(new soNumeros());
        txtQntMinima.setDocument(new soNumeros());
        txtValorUnidade.setDocument(new soNumerosV());
        
        DefaultTableModel modelo = (DefaultTableModel) jTProdutos.getModel();
        
        readJTable();
    }
    
    public void  readJTable(){
        
         DefaultTableModel modelo = (DefaultTableModel) jTProdutos.getModel();
         modelo.setNumRows(0);
         
         jTProdutos.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                    boolean isSelected, boolean hasFocus, int row, int column) {
                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                
                Produtos produto = new Produtos();
                
                //A coluna do status é 3
                Object ref = table.getValueAt(row, 3);//Coluna qnt estoque
                
                int refAux = Integer.parseInt(ref.toString());
                
                
                Object ref2 = table.getValueAt(row, 4);//Coluna qnt minima
                
                int ref2Aux = Integer.parseInt(ref2.toString());
                
                //Coloca cor em todas as linhas,COLUNA(3) que tem o valor menor que qnt minima
                if (ref != null && refAux < ref2Aux) {//Se qnt estoque for menor que qnt minima
                    setBackground(Color.RED);//Preenche a linha de vermelho
                    setForeground(Color.WHITE);//E a fonte de branco
                } else {
                    boolean sel = isSelected;
                    if (sel == true) {
                        setBackground(getBackground());
                        setForeground(getForeground());
                    } else {//Se qnt estoque não for menor que qnt minima
                        setBackground(Color.WHITE);//Preenche a linha de branco
                        setForeground(new Color(51, 51, 51));//E a fonte de preto
                         
                    }
                }
                return this;
            }
        });
         
         
          ArrayList<Produtos> lista = null;
          
          SimpleDateFormat fmt = new SimpleDateFormat("dd/MM/yyyy");
          NumberFormat nf = NumberFormat.getCurrencyInstance();
         
          try{
            lista = ProdutoDAO.listar();
        }catch(Exception e){
           JOptionPane.showMessageDialog(null, "Deu Ruim.");
        }
          
         for(Produtos p:lista){
      
         modelo.addRow(new Object[]{
        
            p.getCodigo(),
            p.getNome(),
            p.getMarca(),
            p.getQntEstoque(),
            p.getQntMinima(),
            p.getUnidMedida(),
            nf.format(p.getValorUnidade()),
            p.getTipo(),
            fmt.format(p.getDtCadastro())
                 
     });
        
    }
         
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTProdutos = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtMarca = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtQtnEstoque = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtQntMinima = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtUnidMedida = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtValorUnidade = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        cbTipo = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        btAlterar = new javax.swing.JButton();
        btCadastrar = new javax.swing.JButton();
        btVoltar = new javax.swing.JButton();
        btReq = new javax.swing.JButton();
        btExcluir = new javax.swing.JButton();
        btPedido = new javax.swing.JButton();
        btGerar = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconifiable(true);
        setTitle("Produtos");

        jTProdutos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Nome", "Marca", "Qnt Estoque", "Qnt Minima", "Unidade de Medida", "Valor da Unidade", "Tipo", "Data de Cadastro"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Float.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTProdutos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTProdutos.getTableHeader().setReorderingAllowed(false);
        jTProdutos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTProdutosMouseClicked(evt);
            }
        });
        jTProdutos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTProdutosKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTProdutos);

        jLabel1.setText("Nome:");

        jLabel2.setText("Marca:");

        jLabel3.setText("Qnt Estoque:");

        jLabel4.setText("Qnt Minima:");

        jLabel5.setText("Unidade de Medida:");

        jLabel6.setText("Valor da Unidade:");

        jLabel7.setText("Tipo:");

        cbTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "Eletrônico", "Limpeza", "Escritório" }));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Ações"));

        btAlterar.setText("Alterar produto");
        btAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAlterarActionPerformed(evt);
            }
        });

        btCadastrar.setText("Cadastrar produto");
        btCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCadastrarActionPerformed(evt);
            }
        });

        btVoltar.setText("Voltar");
        btVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVoltarActionPerformed(evt);
            }
        });

        btReq.setText("Requisitar produto");
        btReq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btReqActionPerformed(evt);
            }
        });

        btExcluir.setText("Excluir produto");
        btExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExcluirActionPerformed(evt);
            }
        });

        btPedido.setText("Realizar pedido");
        btPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPedidoActionPerformed(evt);
            }
        });

        btGerar.setText("Gerar relatório");
        btGerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btGerarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btPedido, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btAlterar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btCadastrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btVoltar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btReq, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btExcluir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btGerar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(btGerar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btAlterar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btCadastrar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btPedido)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btReq)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btExcluir)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btVoltar)
                .addContainerGap())
        );

        jLabel8.setText("ID: ");

        txtId.setEditable(false);
        txtId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1004, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cbTipo, javax.swing.GroupLayout.Alignment.LEADING, 0, 169, Short.MAX_VALUE)
                            .addComponent(txtValorUnidade, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNome, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtId, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtMarca, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtQtnEstoque, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtQntMinima, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtUnidMedida, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMarca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtQtnEstoque, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtQntMinima, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtUnidMedida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtValorUnidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTProdutosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTProdutosMouseClicked
        // TODO add your handling code here:
        
        if (jTProdutos.getSelectedRow() != -1) {
            
            //NumberFormat nf = new DecimalFormat("#,##0.0");
            //txtValorUnidade.setText(nf.format(jTProdutos.getValueAt(jTProdutos.getSelectedRow(), 6)));
            
            txtId.setText(jTProdutos.getValueAt(jTProdutos.getSelectedRow(), 0).toString());
            txtNome.setText(jTProdutos.getValueAt(jTProdutos.getSelectedRow(), 1).toString());
            txtMarca.setText(jTProdutos.getValueAt(jTProdutos.getSelectedRow(), 2).toString());
            txtQtnEstoque.setText(jTProdutos.getValueAt(jTProdutos.getSelectedRow(), 3).toString());
            txtQntMinima.setText(jTProdutos.getValueAt(jTProdutos.getSelectedRow(), 4).toString());
            txtUnidMedida.setText(jTProdutos.getValueAt(jTProdutos.getSelectedRow(), 5).toString());
            txtValorUnidade.setText(jTProdutos.getValueAt(jTProdutos.getSelectedRow(), 6).toString());
            cbTipo.setSelectedItem((jTProdutos.getValueAt(jTProdutos.getSelectedRow(), 7)));

        }
    }//GEN-LAST:event_jTProdutosMouseClicked

    private void jTProdutosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTProdutosKeyReleased
        // TODO add your handling code here:
        
        if (jTProdutos.getSelectedRow() != -1) {
            
            //NumberFormat nf = new DecimalFormat("#,##0.0");
            //txtValorUnidade.setText(nf.format(jTProdutos.getValueAt(jTProdutos.getSelectedRow(), 6)));
            
            txtId.setText(jTProdutos.getValueAt(jTProdutos.getSelectedRow(), 0).toString());
            txtNome.setText(jTProdutos.getValueAt(jTProdutos.getSelectedRow(), 1).toString());
            txtMarca.setText(jTProdutos.getValueAt(jTProdutos.getSelectedRow(), 2).toString());
            txtQtnEstoque.setText(jTProdutos.getValueAt(jTProdutos.getSelectedRow(), 3).toString());
            txtQntMinima.setText(jTProdutos.getValueAt(jTProdutos.getSelectedRow(), 4).toString());
            txtUnidMedida.setText(jTProdutos.getValueAt(jTProdutos.getSelectedRow(), 5).toString());
            txtValorUnidade.setText(jTProdutos.getValueAt(jTProdutos.getSelectedRow(), 6).toString());
            cbTipo.setSelectedItem((jTProdutos.getValueAt(jTProdutos.getSelectedRow(), 7)));

        }
    }//GEN-LAST:event_jTProdutosKeyReleased
        
    private void txtIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdActionPerformed

    private void btExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExcluirActionPerformed
        // TODO add your handling code here:
        if (jTProdutos.getSelectedRow() != -1) {

            Produtos produto = new Produtos();

            produto.setCodigo((int) jTProdutos.getValueAt(jTProdutos.getSelectedRow(), 0));

            int resposta = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja excluir?", "Confirmação", JOptionPane.YES_NO_OPTION);

            if (resposta == JOptionPane.YES_OPTION) {
                try {
                    ProdutoDAO.excluir(produto);
                } catch (SQLException ex) {
                    Logger.getLogger(telaListaProduto.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(telaListaProduto.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (resposta == JOptionPane.NO_OPTION) {
                return;
            }

            txtNome.setText("");
            txtMarca.setText("");
            txtQtnEstoque.setText("");
            txtQntMinima.setText("");
            txtUnidMedida.setText("");
            txtValorUnidade.setText("");
            cbTipo.setSelectedItem("Selecione");

            readJTable();

        } else {
            JOptionPane.showMessageDialog(null, "Selecione um produto para excluir.");
        }
    }//GEN-LAST:event_btExcluirActionPerformed

    private void btReqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btReqActionPerformed

         if (jTProdutos.getSelectedRow() != -1) {
        
        if(enviaTexto == null){
            enviaTexto  = new telaRequisicao();
            
             JdpPrincipal.add(enviaTexto);
             enviaTexto.setLocation(
             JdpPrincipal.getWidth()/2 - enviaTexto.getWidth()/2,
             JdpPrincipal.getHeight()/2 - enviaTexto.getHeight()/2);
             enviaTexto.setVisible(true);
             dispose();
             
            try {
                enviaTexto.recebendo(jTProdutos.getValueAt(jTProdutos.getSelectedRow(), 0).toString());
            } catch (ServerException ex) {
                Logger.getLogger(telaListaProduto.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            enviaTexto.setVisible(true);
            //enviaTexto.setState(telaRequisicao.NORMAL);
            try {
                enviaTexto.recebendo(jTProdutos.getValueAt(jTProdutos.getSelectedRow(), 0).toString());
            } catch (ServerException ex) {
                Logger.getLogger(telaListaProduto.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
      }else{
             String msgErro;
             msgErro = "Selecione um produto antes de continuar.";
             JOptionPane.showMessageDialog(null, msgErro);
               
         }
    }//GEN-LAST:event_btReqActionPerformed

    private void btVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVoltarActionPerformed

        dispose();
    }//GEN-LAST:event_btVoltarActionPerformed

    private void btCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCadastrarActionPerformed
        
        telaCadastroProduto frame = new telaCadastroProduto();
       
        JdpPrincipal.add(frame);
        frame.setLocation(
            JdpPrincipal.getWidth()/2 - frame.getWidth()/2,
            JdpPrincipal.getHeight()/2 - frame.getHeight()/2);
        
        
        frame.setVisible(true);

        dispose();
        
    }//GEN-LAST:event_btCadastrarActionPerformed

    private void btAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAlterarActionPerformed
        String nome = txtNome.getText().trim();
        String marca = txtMarca.getText().trim();
        String qtdEstoque = txtQtnEstoque.getText().trim();
        String qtdMinima = txtQntMinima.getText().trim();
        String unidMedida = txtUnidMedida.getText().trim();
        String valorUnidade = txtValorUnidade.getText().trim();
        String tipo = cbTipo.getSelectedItem().toString();
        String msgErro;
try{
        if (nome.equals("")) {
            msgErro = "Insira o NOME de produto antes de continuar.";
            JOptionPane.showMessageDialog(null, msgErro);
        } else {
            if (marca.equals("")) {
                msgErro = "Insira a MARCA do produto antes de continuar.";
                JOptionPane.showMessageDialog(null, msgErro);
            } else {
                if (qtdEstoque.equals("")) {
                    msgErro = "Insira a QUANTIDADE DE ESTOQUE antes de continuar.";
                    JOptionPane.showMessageDialog(null, msgErro);
                } else {
                    if (qtdMinima.equals("")) {
                        msgErro = "Insira a QUANTIDADE MÍNIMA antes de continuar.";
                        JOptionPane.showMessageDialog(null, msgErro);
                    } else {
                        if (unidMedida.equals("")) {
                            msgErro = "Insira a UNIDADE DE MEDIDA antes de continuar.";
                            JOptionPane.showMessageDialog(null, msgErro);
                        } else {
                            if (valorUnidade.equals("") || valorUnidade.equals(",")) {
                                msgErro = "Insira a VALOR UNIDADE antes de continuar.";
                                JOptionPane.showMessageDialog(null, msgErro);
                            } else {
                                if (tipo.equals("Selecione")) {
                                    msgErro = "Selecione um TIPO antes de continuar.";
                                    JOptionPane.showMessageDialog(null, msgErro);
                                } else {

                                    if (jTProdutos.getSelectedRow() != -1) {

                                        Produtos produto = new Produtos();

                                        Produtos pb = new Produtos();

                                        String IDAux = jTProdutos.getValueAt(jTProdutos.getSelectedRow(), 0).toString();

                                        int ID = Integer.parseInt(IDAux);

                                        try {
                                            pb = ProdutoDAO.buscar(ID);
                                        } catch (SQLException ex) {
                                            Logger.getLogger(telaListaProduto.class.getName()).log(Level.SEVERE, null, ex);
                                        } catch (ClassNotFoundException ex) {
                                            Logger.getLogger(telaListaProduto.class.getName()).log(Level.SEVERE, null, ex);
                                        }

                                        String QntEAux = txtQtnEstoque.getText();
                                        int QntE = Integer.parseInt(QntEAux);

                                        String valorAux = txtValorUnidade.getText();
                                        String aux = valorAux.replace(",", ".");
                                        float valor = Float.parseFloat(aux);

                                        if (pb.getQntEstoque() != QntE) {

                                            produto.setNome(txtNome.getText());
                                            produto.setMarca(txtMarca.getText());
                                            produto.setQntEstoque(Integer.parseInt(txtQtnEstoque.getText()));
                                            produto.setQntMinima(Integer.parseInt(txtQntMinima.getText()));
                                            produto.setUnidMedida(txtUnidMedida.getText());
                                            produto.setValorUnidade(valor);
                                            produto.setTipo(cbTipo.getSelectedItem().toString());
                                            produto.setCodigo((int) jTProdutos.getValueAt(jTProdutos.getSelectedRow(), 0));
                                            produto.setNumPedido(0);

                                        } else {

                                            produto.setNome(txtNome.getText());
                                            produto.setMarca(txtMarca.getText());
                                            produto.setQntEstoque(Integer.parseInt(txtQtnEstoque.getText()));
                                            produto.setQntMinima(Integer.parseInt(txtQntMinima.getText()));
                                            produto.setUnidMedida(txtUnidMedida.getText());
                                            produto.setValorUnidade(valor);
                                            produto.setTipo(cbTipo.getSelectedItem().toString());
                                            produto.setCodigo((int) jTProdutos.getValueAt(jTProdutos.getSelectedRow(), 0));
                                            produto.setNumPedido(pb.getNumPedido());

                                        }

                                        try {
                                            ProdutoDAO.atualizar(produto);
                                        } catch (SQLException | ClassNotFoundException ex) {
                                            Logger.getLogger(telaListaProduto.class.getName()).log(Level.SEVERE, null, ex);
                                        }

                                        txtNome.setText("");
                                        txtMarca.setText("");
                                        txtQtnEstoque.setText("");
                                        txtQntMinima.setText("");
                                        txtUnidMedida.setText("");
                                        txtValorUnidade.setText("");
                                        cbTipo.setSelectedItem("Selecione");

                                        readJTable();

                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
}catch(Exception e){
    String msgErro1;
    msgErro1 = "Insira apenas uma vírgula!!";
    JOptionPane.showMessageDialog(null, msgErro1);
}
    }//GEN-LAST:event_btAlterarActionPerformed

    private void btPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPedidoActionPerformed
       
        if (jTProdutos.getSelectedRow() != -1) {
            if (Float.parseFloat(jTProdutos.getValueAt(jTProdutos.getSelectedRow(), 3).toString()) < Float.parseFloat(jTProdutos.getValueAt(jTProdutos.getSelectedRow(), 4).toString())) {
             
                Produtos pb = new Produtos();
                
                String IDAux = jTProdutos.getValueAt(jTProdutos.getSelectedRow(), 0).toString();
                
                int ID = Integer.parseInt(IDAux);
                
                try {
                    pb = ProdutoDAO.buscar(ID);
                } catch (SQLException ex) {
                    Logger.getLogger(telaListaProduto.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(telaListaProduto.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                
                if(pb.getNumPedido() > 0){
                    
                    JOptionPane.showMessageDialog(null, "Ja existe um pedido para esse produto!");
            }else{
                
                
                if (pegarTexto == null) {
                    
                 pegarTexto = new telaPedido();
                 JdpPrincipal.add(pegarTexto);
                 pegarTexto.setLocation(
                 JdpPrincipal.getWidth()/2 - pegarTexto.getWidth()/2,
                 JdpPrincipal.getHeight()/2 - pegarTexto.getHeight()/2);
                 pegarTexto.setVisible(true);

                    dispose();
                    
                    try {
                        pegarTexto.recebendo(jTProdutos.getValueAt(jTProdutos.getSelectedRow(), 0).toString());
                    } catch (ServerException ex) {
                        Logger.getLogger(telaListaProduto.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    pegarTexto.setVisible(true);
                    //pegarTexto.setState(telaPedido.NORMAL);
                    try {
                        pegarTexto.recebendo(jTProdutos.getValueAt(jTProdutos.getSelectedRow(), 0).toString());
                    } catch (ServerException ex) {
                        Logger.getLogger(telaListaProduto.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
               }
            }else{
             String msgErro;
             msgErro = "Selecione um produto com quantidade abaixo do estoque.";
             JOptionPane.showMessageDialog(null, msgErro);
               
         }

        }else{
             String msgErro;
             msgErro = "Selecione um produto antes de continuar.";
             JOptionPane.showMessageDialog(null, msgErro);
               
         }
    }//GEN-LAST:event_btPedidoActionPerformed

    private void btGerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btGerarActionPerformed
        
        Connection con = ConnectionFactory.getConnection();
        String src = "RProduto.jasper";
        JasperPrint jasperPrint = null;
        try {
            jasperPrint = JasperFillManager.fillReport(src, null, con);
        } catch (JRException ex) {
            System.out.println("Error: " + ex);
        }
        JasperViewer view = new JasperViewer(jasperPrint, false);
        view.setVisible(true);
        
    }//GEN-LAST:event_btGerarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAlterar;
    private javax.swing.JButton btCadastrar;
    private javax.swing.JButton btExcluir;
    private javax.swing.JButton btGerar;
    private javax.swing.JButton btPedido;
    private javax.swing.JButton btReq;
    private javax.swing.JButton btVoltar;
    private javax.swing.JComboBox<String> cbTipo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTProdutos;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtMarca;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtQntMinima;
    private javax.swing.JTextField txtQtnEstoque;
    private javax.swing.JTextField txtUnidMedida;
    private javax.swing.JTextField txtValorUnidade;
    // End of variables declaration//GEN-END:variables
    
    
    
}
