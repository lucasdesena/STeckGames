/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package stecgames.visão;

import java.awt.Desktop;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.FieldPosition;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.AccessibleAttribute;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import stecgames.modelo.CadastroJogos;
import stecgames.modelo.ClienteFisico;
import stecgames.modelo.ClienteJuridico;
import stecgames.modelo.Vendas;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;
import stecgames.controle.ApenasNumero;
import stecgames.persistencia.CadastroJogosDAO;
import stecgames.persistencia.ClienteFisicoDAO;
import stecgames.persistencia.ConnectionFactory;
import stecgames.persistencia.VendasDAO;
import stecgames.utilitarios.ApenasNumeros;

/**
 *
 * @author Pedro
 */
public class NovaVenda extends javax.swing.JInternalFrame {
    
    public NovaVenda() {
        initComponents();
        IDD.setVisible(true);
        txtQuantidade.setDocument(new ApenasNumero());
        Tipo.setVisible(true);
        LerTabela();
     
    }
    
    public void  LerTabela(){
        
        DefaultTableModel modelo = (DefaultTableModel) tabelaDeVendas.getModel();
        modelo.setNumRows(0);
         
        ArrayList<CadastroJogos> lista = null;
         
        try{
           lista = CadastroJogosDAO.listarCadastroJogos();
        }catch(Exception e){
           JOptionPane.showMessageDialog(null, "Falhou.");
        }
          
        
        for(CadastroJogos CJ:lista){
        modelo.addRow(new Object[]{
        
           CJ.getIdCadastroJogos(),
           CJ.getNome(),
           CJ.getTipo(),
           CJ.getQuantidade(),
          /* NumberFormat.getCurrencyInstance().format(*/CJ.getValor()//)
       
     });     
    }     
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelProdutos = new javax.swing.JPanel();
        btAdicionar = new javax.swing.JButton();
        txtQuantidade = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaDeVendas = new javax.swing.JTable();
        IDD = new javax.swing.JTextField();
        Tipo = new javax.swing.JTextField();
        jPanelCarrinho = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tabelaCarrinho = new javax.swing.JTable();
        btCancelar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtValorTotal = new javax.swing.JTextField();
        cbForma = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        btConfirmar = new javax.swing.JButton();
        btExcluir = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("Nova Venda");

        jPanelProdutos.setBorder(javax.swing.BorderFactory.createTitledBorder("Produtos"));
        jPanelProdutos.setToolTipText("");
        jPanelProdutos.setLayout(null);

        btAdicionar.setText("Adicionar");
        btAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAdicionarActionPerformed(evt);
            }
        });
        jPanelProdutos.add(btAdicionar);
        btAdicionar.setBounds(438, 218, 125, 31);

        txtQuantidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQuantidadeActionPerformed(evt);
            }
        });
        txtQuantidade.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtQuantidadeKeyReleased(evt);
            }
        });
        jPanelProdutos.add(txtQuantidade);
        txtQuantidade.setBounds(367, 223, 61, 20);

        jLabel29.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel29.setText("Quantidades do produto");
        jPanelProdutos.add(jLabel29);
        jLabel29.setBounds(197, 210, 160, 43);

        tabelaDeVendas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Nome", "Tipo", "Quantidade", "Valor Unidade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaDeVendas.setToolTipText("");
        tabelaDeVendas.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        tabelaDeVendas.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tabelaDeVendas.getTableHeader().setReorderingAllowed(false);
        tabelaDeVendas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaDeVendasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaDeVendas);

        jPanelProdutos.add(jScrollPane1);
        jScrollPane1.setBounds(16, 27, 550, 172);

        IDD.setEditable(false);
        IDD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDDActionPerformed(evt);
            }
        });
        jPanelProdutos.add(IDD);
        IDD.setBounds(20, 220, 30, 20);

        Tipo.setEditable(false);
        Tipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TipoActionPerformed(evt);
            }
        });
        jPanelProdutos.add(Tipo);
        Tipo.setBounds(60, 220, 50, 20);

        jPanelCarrinho.setBorder(javax.swing.BorderFactory.createTitledBorder("Carrinho do Cliente"));
        jPanelCarrinho.setLayout(null);

        tabelaCarrinho.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "Quantidades"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaCarrinho.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tabelaCarrinho.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaCarrinhoMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tabelaCarrinho);

        jPanelCarrinho.add(jScrollPane4);
        jScrollPane4.setBounds(16, 27, 410, 172);

        btCancelar.setText("Cancelar Compra");
        btCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelarActionPerformed(evt);
            }
        });
        jPanelCarrinho.add(btCancelar);
        btCancelar.setBounds(440, 210, 140, 38);

        jLabel1.setText("Valor Total:");
        jPanelCarrinho.add(jLabel1);
        jLabel1.setBounds(440, 30, 80, 14);

        txtValorTotal.setEditable(false);
        txtValorTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtValorTotalActionPerformed(evt);
            }
        });
        jPanelCarrinho.add(txtValorTotal);
        txtValorTotal.setBounds(440, 50, 130, 20);

        cbForma.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cartão de Crédito", "Cartão de Débito", "Boleto Bancário" }));
        jPanelCarrinho.add(cbForma);
        cbForma.setBounds(440, 110, 130, 20);

        jLabel2.setText("Forma de Pagamento:");
        jPanelCarrinho.add(jLabel2);
        jLabel2.setBounds(440, 90, 140, 14);

        btConfirmar.setText("Concluir Compra");
        btConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConfirmarActionPerformed(evt);
            }
        });
        jPanelCarrinho.add(btConfirmar);
        btConfirmar.setBounds(20, 210, 120, 38);

        btExcluir.setText("Excluir Jogo");
        btExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExcluirActionPerformed(evt);
            }
        });
        jPanelCarrinho.add(btExcluir);
        btExcluir.setBounds(150, 210, 110, 38);

        jButton1.setText("Remover Produto");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanelCarrinho.add(jButton1);
        jButton1.setBounds(270, 210, 130, 40);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelCarrinho, javax.swing.GroupLayout.DEFAULT_SIZE, 597, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanelProdutos, javax.swing.GroupLayout.DEFAULT_SIZE, 597, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(266, Short.MAX_VALUE)
                .addComponent(jPanelCarrinho, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanelProdutos, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(271, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAdicionarActionPerformed
        String quantidade = txtQuantidade.getText().trim();
        String msgErro = "";
        DefaultTableModel modelo = (DefaultTableModel) tabelaCarrinho.getModel();
        
        String qtdauxi = tabelaDeVendas.getValueAt(tabelaDeVendas.getSelectedRow(), 3).toString();
        int qtd5 = Integer.parseInt(qtdauxi);
        int qtd6 = Integer.parseInt(quantidade);
        
        if(qtd5 < qtd6){
            msgErro = "Quantidade inserida superior a quantidade disponível";
            JOptionPane.showMessageDialog(null, "Quantidade inserida superior a quantidade disponível");
        }

        if(quantidade.isEmpty() || quantidade.equals(null)){
            msgErro = "Insira a quantidade de produtos";
            JOptionPane.showMessageDialog(this, "Insira a quantidade de produtos");
        }
        
        if(tabelaDeVendas.getSelectedRow() == -1){
            msgErro = "Selecione algum Jogo!";
            JOptionPane.showMessageDialog(this, "Selecione algum Jogo!");
        }

        if(msgErro.equals("")){    
      

        try{
           
            String Nome = tabelaDeVendas.getValueAt(tabelaDeVendas.getSelectedRow(), 1).toString();
            String auxValor = tabelaDeVendas.getValueAt(tabelaDeVendas.getSelectedRow(), 4).toString();
            float Valor = Float.parseFloat(auxValor);
            int Quantidade = Integer.parseInt(txtQuantidade.getText());
            float Conta = Valor * Quantidade;
            String Total = txtValorTotal.getText();
            String idAux = tabelaDeVendas.getValueAt(tabelaDeVendas.getSelectedRow(), 0).toString();
            int ID = Integer.parseInt(idAux);
            
            if(Total.equals("")){
               String ValorT = String.valueOf(Conta); 
               txtValorTotal.setText(ValorT); 
            }else{
               String aux = txtValorTotal.getText();
               float contaux = Conta + Float.parseFloat(aux);
               txtValorTotal.setText(String.valueOf(contaux));
            }
            
           
            modelo.addRow(new Object[]{
                   
            ID,
            Nome,
            quantidade
                    
            });
      
            CadastroJogos CJ = new CadastroJogos();
    
            String idAuxi = tabelaDeVendas.getValueAt(tabelaDeVendas.getSelectedRow(), 0).toString();
            int id = Integer.parseInt(idAuxi);
            String Nome2 = tabelaDeVendas.getValueAt(tabelaDeVendas.getSelectedRow(), 1).toString();         
            String tipo = tabelaDeVendas.getValueAt(tabelaDeVendas.getSelectedRow(), 2).toString();
            String auxQtd2 =  tabelaDeVendas.getValueAt(tabelaDeVendas.getSelectedRow(), 3).toString();
            int Qtd2 = Integer.parseInt(auxQtd2);       
            String auxValor2 = tabelaDeVendas.getValueAt(tabelaDeVendas.getSelectedRow(), 4).toString();
            float Valor2 = Float.parseFloat(auxValor2);
            int Quantidade2 = Integer.parseInt(txtQuantidade.getText()); 
            int QtdR2 = Qtd2 - Quantidade2;
            
            CJ.setIdCadastroJogos(id);
            CJ.setNome(Nome2);
            CJ.setTipo(tipo);
            CJ.setQuantidade(QtdR2);
            CJ.setValor(Valor2);
            
            try{
            CadastroJogosDAO.atualizar(CJ);
            LerTabela();
            }catch(Exception ex){
                JOptionPane.showMessageDialog(null, "Falha ao atualizar.");
            }
            }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Falhou.");
            }
        }    
    }//GEN-LAST:event_btAdicionarActionPerformed

    private void txtQuantidadeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQuantidadeKeyReleased

    }//GEN-LAST:event_txtQuantidadeKeyReleased

    private void txtValorTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtValorTotalActionPerformed
    }//GEN-LAST:event_txtValorTotalActionPerformed

    private void btCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelarActionPerformed
        int resposta = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja cancelar essa operação?", "Cancelar Operação", JOptionPane.YES_NO_OPTION);
        if(resposta == JOptionPane.YES_OPTION){
            dispose();
        }
    }//GEN-LAST:event_btCancelarActionPerformed

    private void IDDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDDActionPerformed
    }//GEN-LAST:event_IDDActionPerformed

    private void txtQuantidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQuantidadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQuantidadeActionPerformed

    private void btConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConfirmarActionPerformed
        if(tabelaCarrinho.getRowCount() == -1){
            JOptionPane.showMessageDialog(null, "Selecione algum produto para realizar a compra");
        }else{

        Vendas v = new Vendas();
        
        float Valor = Float.parseFloat(txtValorTotal.getText());
        String idAux = IDD.getText();
        int id = Integer.parseInt(idAux);
        String Forma = cbForma.getSelectedItem().toString();
        String tipo = Tipo.getText();
        
        v.setValor(Valor);
        v.setIdClienteComprador(id);
        v.setFormaPagamento(Forma);
        v.setCompraConcluida("Sim");
        v.setTipoCliente(tipo);
        
        try{
            VendasDAO.inserir(v);
            int Confirmacao = JOptionPane.showConfirmDialog(null, "Venda realizada com sucesso!\n Deseja realizar uma nova venda ?", "Venda Realizada", JOptionPane.YES_NO_OPTION);
            if(Confirmacao == 0){
            ListarClientesTela frame = new ListarClientesTela();
            frame.setVisible(true);
            dispose();
            }else{
            dispose();
            }
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Não foi possível inserir");
        }
        }
    }//GEN-LAST:event_btConfirmarActionPerformed

    private void TipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TipoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TipoActionPerformed

    private void btExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExcluirActionPerformed
        if(tabelaDeVendas.getSelectedRow() >= 0){
        String idAux = tabelaDeVendas.getValueAt(tabelaDeVendas.getSelectedRow(), 0).toString();
        int id = Integer.parseInt(idAux);
        
        CadastroJogos CJ = new CadastroJogos();
        
        CJ.setIdCadastroJogos(id);
        
        try{
            CadastroJogosDAO.excluir(CJ);
            }catch(Exception ex){
                JOptionPane.showMessageDialog(null, "Falha ao Excluir.");
            }
        }  
    }//GEN-LAST:event_btExcluirActionPerformed

    private void tabelaCarrinhoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaCarrinhoMouseClicked
        tabelaCarrinho.setRowSelectionAllowed(true);
        tabelaDeVendas.setRowSelectionAllowed(false);
    }//GEN-LAST:event_tabelaCarrinhoMouseClicked

    private void tabelaDeVendasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaDeVendasMouseClicked
         tabelaCarrinho.setRowSelectionAllowed(false);
        tabelaDeVendas.setRowSelectionAllowed(true);
    }//GEN-LAST:event_tabelaDeVendasMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DefaultTableModel dtm = (DefaultTableModel)tabelaCarrinho.getModel();
        if (tabelaCarrinho.getSelectedRow() != -1){
            
            
            String idAux = tabelaCarrinho.getValueAt(tabelaCarrinho.getSelectedRow(), 0).toString();
            int id = Integer.parseInt(idAux);
            
            CadastroJogos CJ = new CadastroJogos();
            CadastroJogos cja = new CadastroJogos();
            
            try {
                CJ = CadastroJogosDAO.buscar(id);
            } catch (SQLException | ClassNotFoundException ex) {
                Logger.getLogger(NovaVenda.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
            cja.setQuantidade(CJ.getQuantidade());
            
            int Qtd2 = cja.getQuantidade();
            
            
            String auxQtd3 =  tabelaCarrinho.getValueAt(tabelaCarrinho.getSelectedRow(), 2).toString();
            int Qtd3 = Integer.parseInt(auxQtd3);
            int VoltarQtd = Qtd2 + Qtd3;
            
            cja.setNome(CJ.getNome());
            cja.setTipo(CJ.getTipo());
            cja.setQuantidade(VoltarQtd);
            cja.setValor(CJ.getValor());
            cja.setIdCadastroJogos(CJ.getIdCadastroJogos());
            
            dtm.removeRow(tabelaCarrinho.getSelectedRow());
            tabelaCarrinho.setModel(dtm);
            try{
            CadastroJogosDAO.atualizar(cja);
            LerTabela();
            }catch(Exception ex){
                JOptionPane.showMessageDialog(null, "Falha ao atualizar.");
            }
        }else{
            JOptionPane.showMessageDialog(null, "Selecione algum produto inserido para Excluir");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField IDD;
    private javax.swing.JTextField Tipo;
    private javax.swing.JButton btAdicionar;
    private javax.swing.JButton btCancelar;
    private javax.swing.JButton btConfirmar;
    private javax.swing.JButton btExcluir;
    private javax.swing.JComboBox<String> cbForma;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JPanel jPanelCarrinho;
    private javax.swing.JPanel jPanelProdutos;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable tabelaCarrinho;
    private javax.swing.JTable tabelaDeVendas;
    private javax.swing.JTextField txtQuantidade;
    private javax.swing.JTextField txtValorTotal;
    // End of variables declaration//GEN-END:variables

    void recebe(String pegar, String pega) {
       int idAux = Integer.parseInt(pegar);
       
       ClienteFisico cf = new ClienteFisico();
       
       try{
           IDD.setText(pegar);
            Tipo.setText(pega);
       }catch(Exception ex){
           JOptionPane.showMessageDialog(null, "Falhou.");
       }
    }

}